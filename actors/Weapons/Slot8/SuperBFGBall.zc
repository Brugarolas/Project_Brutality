class PB_SuperBFGBall : Actor
{


	Default
    {
	Projectile;
	Speed 24;
	RenderStyle "Normal";
// 	Alpha 0.99;
	Scale 0.9;
	Radius 4;
	Height 8;
	
	
	Damage 500;
    Decal "BFGLightning";
	DeathSound "BFGEXPLO";
    DamageType "Disintegrate";
// 	Scale 0.65;
	Species "Marines";
	+SEEKERMISSILE;
	+Friendly;
	+THRUSPECIES;
	+MTHRUSPECIES;
	+DONTHARMSPECIES;
	+FORCEXYBILLBOARD;
	}
	  States
	  {
		  Spawn:
				TNT1 A 0;
				TNT1 A 0 A_StartSound("Bfgfly1", CHAN_BODY, CHANF_OVERLAP|CHANF_LOOPING );
		  Flying:
			098G ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 BRIGHT Light("BFGBALL") {
				
			//	A_SpawnItemEx("BFGFOG",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
				A_SpawnItemEx("BFGTrailParticle", Random(-13, 13), Random(-13, 13), Random(7, 22), Random(-8, 8), Random(-3, 3), (0.1)*Random(-10, 10), Random(-20, 20), 128);
				A_SpawnItemEx("BFGLightningTrial", 15, random(-1,1), random(-6,-4), 20);
				
				//A_SpawnItemEx("NewBFGTrailGreen", 15, random(8,-8), random(8,-8), 0, 0, 0, 0, 128, 0);
			}
			099G ABCD 1 BRIGHT Light("BFGBALL") {
				
			//	A_SpawnItemEx("BFGFOG",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);
// 				A_SpawnItemEx("BFGTrailParticle", Random(-13, 13), Random(-13, 13), Random(0, 18), Random(1, 3), 0, (0.1)*Random(-10, 10), Random(-20, 20), 128);
				A_SpawnItemEx("BFGTrailParticle", Random(-13, 13), Random(-13, 13), Random(7, 22), Random(-8, 8), Random(-3, 3), (0.1)*Random(-10, 10), Random(-20, 20), 128);
				A_SpawnItemEx("BFGLightningTrial", 15, random(-1,1), random(-6,-4), 20);
				//A_SpawnItemEx("NewBFGTrailGreen", 15, random(8,-8), random(8,-8), 0, 0, 0, 0, 128, 0);
			}
			Loop;
	 
		 Death:
			TNT1 A 0;
			TNT1 A 0 A_StopSound(6);
			TNT1 A 0 Bright A_SpawnItem("GreenShockWave",0,0,0);
			EXPL A 0 Radius_Quake (5, 16, 0, 20, 0);//(intensity, duration, damrad, tremrad, tid)
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("BFGBIGFOG", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("BFGDeathParticleFast", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("BFGDeathParticleSuperFast", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("BFGDeathParticleFast", 0, 0, random (0, 360), 2, random (0, 360));
			EXPL AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_SpawnProjectile ("BFGDeathParticleFast", 0, 0, random (0, 360), 2, random (0, 360));
			TNT1 A 0 A_SpawnItem("MegaGibRemoving");
			TNT1 A 0 A_StartSound("BFGAR", 3);
			TNT1 A 0 A_Explode(400,500,0,0,true);
			BFGB ABCDE 1 Bright Light("BFGBALL") A_SpawnItem("GreenFlare",0,0) ;
			BFE1 F 1 Bright Light("BFGBALL")A_BFGSpray("SuperBFGExtra", 40, 35);
			TNT1 A 0 A_SPawnItem("SuperBFGExtraGiant");
			BFE1 GGHHIIJJKK 1 Bright Light("BFGBALL") A_SpawnItem("GreenFlare",0,0);
			Stop;
	  }
    

    override void PostBeginPlay()
    {
        Super.PostBeginPlay();

    }
	
	int TickRate;

	override void Tick()
	{
		Super.Tick();

		TickRate++;
		if (TickRate >= 3) 
		{
			A_AttackRailTargets(1024);
			TickRate = 0; // Reset the counter
		}
	}

    Actor FindTarget(double radius)
    {
        BlockThingsIterator it = BlockThingsIterator.Create(self, radius);
		Actor thing;

		while (it.Next())
        {
			thing = it.thing;
         //   if (thing != self && thing.bShootable && !thing.bFriendly)
            
			if (!thing || thing is "PlayerPawn" || !thing.bSolid || Distance2D(thing) > radius)
           		
			{
				continue;
			}
			
			
			if (self.CheckSight(thing))
			{
				return thing; // return the found actor
			}
			else
			{
				continue; // If no line of sight, continue checking the next potential target.
			}
        }
        
        return null;


    }

	void A_AttackRailTargets(double dist = 1024)
	{
		if (!target)
			return;

		let itr = BlockThingsIterator.Create(self, dist);
		while (itr.Next())
		{        
			let victim = itr.thing;
			// check it's a valid victim (a shootable, hostile, alive monster):
			if (victim == target || victim == self || !victim.bISMONSTER || !victim.bSHOOTABLE || !victim.isHostile(target) || victim.health <= 0)
			{
				continue;
			}
			
			// check distance:
			double victimDist = Distance3D(victim);
			if (victimDist > dist)
			{
				continue;
			}
			
			// face the victim:
			A_Face(victim, flags: FAF_MIDDLE);

			// check the victim can be reached:
			FLineTraceData ltrace;
			LineTrace(angle, victimDist, pitch, offsetz: height * 0.5, data: ltrace);
			// abort the attack if LineTrace hit a different actor that is also shootable
			// but is either the player or a player's friend:
			if (ltrace.HitType == TRACE_HitActor)
			{
				let act = ltrace.hitActor;
				if (act && act != victim && act.bSHOOTABLE && (act == target || act.IsFriend(target)))
				{
					continue;
				}
			}
			
			// proceed with attack:
			A_CustomRailgun(15, 0, "", "Green", 
				flags: RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING, 
				aim: 0, 
				pufftype: "None", 
				range: victimdist, 
				duration: 1, 
				sparsity: 60, 
				spawnclass: "BFGLightningTrial_Small"
			);
		}
	}

}
