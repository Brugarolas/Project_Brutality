// Spawning Related Tokens

Class SpawnwSSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnQuadSG : Inventory {default{inventory.maxamount 1;}}
Class NoSpawn : Inventory {default{inventory.maxamount 1;}}
Class CheckCvarSSG : Inventory {default{inventory.maxamount 1;}}
Class CvarChecked : Inventory {default{inventory.maxamount 1;}}
Class NoSpawnASGUpgrade : Inventory {default{inventory.maxamount 1;}}
Class NeedSpawning : Inventory {default{inventory.maxamount 1;}}
Class PlayerHasCaughtup : Inventory {default{inventory.maxamount 1;}}

//Chainsaw Spawner
Class PlayerHasChainsawPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasFLMTUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
// Shotgun Spawner
Class PlayerHasShotgunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasRevolverPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasSGMagPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasDeaglePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
// SSG Spawner
Class PlayerHasSSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasQuadSGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasASGDrumPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Chaingun Spawner
Class PlayerHasMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCarbinePermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasNailGunPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasHDMRPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSMGPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasMGUPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasLMGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//RL Spawner
Class PlayerHasRLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasSGLPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//Plasma Spawner
Class PlayerHasM1PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasM2PlasmaPermanent : Inventory {default{inventory.maxamount 2;+inventory.UNDROPPABLE;}}
Class PlayerHasRGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasCryoPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasM2UPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
//BFG Spawner
Class PlayerHasBFGPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasMG42Permanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}
Class PlayerHasUnmakerPermanent : Inventory {default{inventory.maxamount 1;+inventory.UNDROPPABLE;}}

Class PB_SpawnerBase : Actor
{
	
	PB_GlobalStats Stats;
	
	Default
	{
	+LOOKALLAROUND;
	// Necessary for see states on the monster spawners
	// so stuff doesn't break.
	// does not apply with dynamic spawning turned off.
	Monster; 
	-SOLID;
	+NOTIMEFREEZE;
	-COUNTKILL;
	//+NODAMAGE;
	+DONTGIB;
	//+NOMENU;
	+FORCEXYBILLBOARD;
	Species "spawner";
	}

	bool isTieredSet()
	{
		return CVAR.GetCVAR("pb_spawner_tiered").GetBool();
	}
	
	int Tier()
	{
		return CVAR.GetCVAR("PBSpawnChoices").GetInt();
	}
	
	override void Tick()
	{
		
		Super.Tick();
		
		
		//Check CVARs if tiered preset and, if so, select appropriate tier (I, II, III, IV) ... else go with default spawn
		//Check CVARs for spawn value pulled from presets
		
		//If monster, check surrounding actors for same class name
		
	}

	States
	{
		Spawn:
	    TNT1 A 1;
        stop;
	}
}

CLASS droppedbase:CustomInventory
{
default
{
    Radius 8;
    Height 10;
    Scale 0.5;
    gravity 1;
	Decal "none";
    //+MOVEWITHSECTOR;
    +DONTGIB;
    //+NOTELEPORT;
	+FLOORCLIP;
	Inventory.PickupMessage "";
    Inventory.PickupSound "";
	+NOTIMEFREEZE;
}
    States
    {
    Spawn:
		//TNT1 AA 1
		TNT1 AA 0;
	Spawn2:	
	    TNT1 A 0;
        Stop;
	Pickup:
		TNT1 A 0;
		Stop;
	Pickup2:
		TNT1 A 0;
		Stop;
	Death:
        TNT1 A 0;
        Stop;
    }
}

// SequentialMapOrder is 1-32, not 0-32, we start from 1.
class pb_worldHandler : EventHandler
{
 override void WorldUnloaded (WorldEvent e)
 {
  // very few things have this defined but its here if needed.
  // special case here as if anything is loaded that will go into MAP01
  // it is definitely a map that allows you to do something with
  // selections like jimmy's jukebox.
    
	if(gamestate==GS_TITLELEVEL||e.NextMap ~== "MAP01")
    {
     CVar.GetCVar("CanGive").SetBool(false);
    }
	// Increment based on what it isn't rather than what it is,
    if(gamestate!=GS_TITLELEVEL||e.NextMap != "PBTEST"||e.NextMap != "TEST"||e.NextMap != "TITLEMAP")
    {
     CVar.GetCVar("CanGive").SetBool(true);
    }
 }
   
 override void WorldLoaded (WorldEvent e)
 {   
  // Check for re-visited maps.
  if(e.IsReOpen==true)
  {
   CVar.GetCVar("CanGive").SetBool(false);
  }
  if(e.IsReOpen==false)
  {
   CVar.GetCVar("CanGive").SetBool(true);
  }
    
   // Proceed normally
   if(CVar.GetCVar("CanGive").GetBool()==true)
	{
	 switch(SMO)
	 {
	  // Tier 1 Begin
	  Case 0:CVar.GetCVar("SMO").SetInt(1);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 1:CVar.GetCVar("SMO").SetInt(2);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 2:CVar.GetCVar("SMO").SetInt(3);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 3:CVar.GetCVar("SMO").SetInt(4);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 4:CVar.GetCVar("SMO").SetInt(5);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 5:CVar.GetCVar("SMO").SetInt(6);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 6:CVar.GetCVar("SMO").SetInt(7);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Dynamic Progresion T2 BEGIN & T1 END - 8
	  Case 7:CVar.GetCVar("SMO").SetInt(8);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Tiered Progression T2 Begin - 9
	  Case 8:CVar.GetCVar("SMO").SetInt(9);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 9:CVar.GetCVar("SMO").SetInt(10);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 10:CVar.GetCVar("SMO").SetInt(11);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 11:CVar.GetCVar("SMO").SetInt(12);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 12:CVar.GetCVar("SMO").SetInt(13);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 13:CVar.GetCVar("SMO").SetInt(14);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 14:CVar.GetCVar("SMO").SetInt(15);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Dynamic Progresion T3 BEGIN & T2 END - 16
	  Case 15:CVar.GetCVar("SMO").SetInt(16);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Tiered Progression T2 Begin - 17
	  Case 16:CVar.GetCVar("SMO").SetInt(17);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 17:CVar.GetCVar("SMO").SetInt(18);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 18:CVar.GetCVar("SMO").SetInt(19);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 19:CVar.GetCVar("SMO").SetInt(20);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 20:CVar.GetCVar("SMO").SetInt(21);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 21:CVar.GetCVar("SMO").SetInt(22);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 22:CVar.GetCVar("SMO").SetInt(23);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Dynamic Progresion T4 BEGIN & T3 END - 24
	  Case 23:CVar.GetCVar("SMO").SetInt(24);CVar.GetCVar("CanGive").SetBool(false);break;
	  //Tiered Progression T4 Begin - 25
	  Case 24:CVar.GetCVar("SMO").SetInt(25);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 25:CVar.GetCVar("SMO").SetInt(26);CVar.GetCVar("CanGive").SetBool(false);break;
	  Case 26:CVar.GetCVar("SMO").SetInt(27);CVar.GetCVar("CanGive").SetBool(false);break;
      // If you get this something broke, as always, insurance.
	  // This should never happen but its here so engine don't error out
	  // in case you somehow get a value above 27
	  default:
	  CVar.GetCVar("SMO").SetInt(27);CVar.GetCVar("CanGive").SetBool(false);break;
	 }
    }
  }
}