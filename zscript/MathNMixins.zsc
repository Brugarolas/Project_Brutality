class PB_Math abstract
{
	static vector3 VecFromAngles(double angle, double pitch, double mag = 1.)
	{
		double cosp = cos(pitch);
		return (cos(angle)*cosp, sin(angle)*cosp, -sin(pitch)) * mag;
	}
}

//[inkoalawetrust] CheckActorExists(), IsDead(), and IsInState() are copied from my KAI library.
Mixin Class PB_CheckFunctions
{
	ClearScope Bool CheckActorExists (Name ActorClass)
	{
		Class<Actor> Act = ActorClass;
		Return !!Act;
	}
	
	ClearScope Bool IsDead (Actor Other)
	{
		If (!Other) Return False;
		Return (Other.Player ? Other.Player.PlayerState == PST_DEAD : Other.Health <= 0);
	}
	
	ClearScope Bool IsInState (Actor Other, StateLabel CheckFor = "Spawn", Bool Exact = False, Bool FromWeapon = False)
	{
		If (!Other) Return False;
		Return (Other.InStateSequence(Other.CurState,Other.FindState (CheckFor,Exact)));
	}
}

mixin class PB_BetterPickupSound
{
	override void PlayPickupSound(actor toucher)
	{
		double atten;
		int flags = CHANF_OVERLAP|CHANF_MAYBE_LOCAL;
		if(bNoAttenPickupSound) atten = ATTN_NONE;
		else atten = ATTN_NORM;
		if(toucher && toucher.CheckLocalView()) flags |= CHANF_NOPAUSE;
		toucher.A_StartSound(PickupSound,1002,flags,1.0,atten);
	}
}

mixin class PB_PowerupTimer
{
	int d;
	void PowerupTimer(color c)
	{
		d=EffectTics;
		switch(d)
		{
			case 105:case 70:case 35: owner.A_SetBlend(c,0.75,12);
			default: break;
		}
	}
	
	void EndBlend(color c)
	{ owner.A_SetBlend(c,0.85,35); }
}

mixin class PB_RandomZombieNameHandler
{	
    static const String PB_ZombiemanFirstNames[] =
	{
        "John",
		"Jeff",
		"Chris",
		"Marcus",
		"Donovan",
		"Dominic",
		"Johnny",
		"Tyrone",
		"Ashton",
		"Bob"
    };
    
    static const String PB_ZombiemanLastNames[] =
    {
        "Doe",
		"Ortega",
		"Ramirez",
		"Fernandez",
		"Price",
		"Huff",
		"Barley"
    };
	
	static const String PB_CivvieRanks[] = //Jobs??
    {
        "Mechanic",
		"Electrician",
		"Engineer",
		"IT Technician"
    };
	
    static const String PB_ZombiemanRanks[] =
    {
        "PFC",
		"SPC",
		"CPL",
		"SGT",
		"MSG",
		"CSM",
		"LT",
		"CPT",
		"MAJ",
		"COL",
		"GEN"
    };
	
	static const String PB_ScientistRanks[] =
    {
        "Trainee",
		"IAN",
		"Dr"
    };
	
	static const String PB_CultistRanks[] = //will need expanding possibly
    {
        "Cultist",
		"Templar",
		"Priest",
		"Inquisitor",
		"Wizard",
		"Lord",
		"Grand Master",
		"Grand Mage",
		"Grand Inquisitor",
		"Grand Lord",
		"Shadow Wizard" //money gang
    };
	
	Enum FormerHumanRanks
	{
		RANK_CIVILIAN,
		RANK_MILITARY,
		RANK_CULTIST,
		RANK_DOKTOR,
	}
    
    //put in monster's PostBeginPlay() virtual
    void PickRandomName(int rankType = RANK_MILITARY) //0 civvie, 1 military, 2 cultists, 3 DOKTOR (that is turning off my pain inhibitors)
    {
		string mRank;
		switch(rankType)
		{
			default:
			case RANK_CIVILIAN:
				mRank = PB_CivvieRanks[random(0, PB_CivvieRanks.Size() - 1)];
				break;
			case RANK_MILITARY:
				mRank = PB_ZombiemanRanks[random(0, PB_ZombiemanRanks.Size() - 1)];
				break;
			case RANK_CULTIST:
				mRank = PB_CultistRanks[random(0, PB_CultistRanks.Size() - 1)];
				break;
			case RANK_DOKTOR:
				mRank = PB_ScientistRanks[random(0, PB_ScientistRanks.Size() - 1)];
				break;
		}
		
        string mFirstName = PB_ZombiemanFirstNames[random(0, PB_ZombiemanFirstNames.Size() - 1)];
        string mLastName = PB_ZombiemanLastNames[random(0, PB_ZombiemanLastNames.Size() -1 )];
        
    
        SetTag(mRank.." "..mFirstName.." "..string.Format("%c", random[PBRand]("A", "Z"))..". "..mLastName);
    }
}